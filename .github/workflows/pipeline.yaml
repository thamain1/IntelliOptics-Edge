name: CI Pipeline

on:
  push:
    branches: ["**"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["**"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.8.3"
  IMAGE_NAME: "intellioptics/edge"

jobs:
  lint:
    name: Lint & Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install Poetry ${{ env.POETRY_VERSION }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install "poetry==${{ env.POETRY_VERSION }}"

      - name: Show Poetry & Python
        run: |
          python --version
          poetry --version

      - name: Install lint deps (Makefile target if available)
        run: |
          if [ -f Makefile ]; then
            make install-lint || true
          fi
          python -m pip install yamllint

      - name: Validate workflow YAML
        working-directory: .github/workflows
        run: |
          set -e
          yamllint -c ../.yamllint.yaml \
            pipeline.yaml \
            format-lite.yaml \
            validate-workflow-files.yaml \
            build-push-ee-image.yaml \
            edge-build-push.yml \
            sweeper-eeut.yaml \
            test-k3s-helm.yaml \
            auto-assign.yaml

  test:
    name: Unit & Integration Tests
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install Poetry ${{ env.POETRY_VERSION }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install "poetry==${{ env.POETRY_VERSION }}"

      - name: Regenerate lock (no updates)
        run: |
          poetry lock --no-update

      - name: Install project (no dev if Makefile not present)
        run: |
          if [ -f Makefile ]; then
            make install || poetry install
          else
            poetry install
          fi

      - name: Run tests
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          if [ -f Makefile ]; then
            make test || poetry run pytest -q
          else
            poetry run pytest -q
          fi

  docker_build:
    name: Build & (optionally) Push Docker image
    if: github.event_name != 'pull_request'
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to container registry (if secrets provided)
        if: env.ACR_LOGIN_SERVER != '' && env.ACR_USERNAME != '' && env.ACR_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Derive tags
        id: meta
        run: |
          TAG="ci-${GITHUB_SHA::7}"
          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "tag_latest=true" >> $GITHUB_OUTPUT
          fi
          if [[ "${GITHUB_REF_TYPE}" = "tag" && "${GITHUB_REF_NAME}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "tag_release=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi
          echo "tag_sha=${TAG}" >> $GITHUB_OUTPUT

      - name: Build image (no push)
        if: env.ACR_LOGIN_SERVER == '' || env.ACR_USERNAME == '' || env.ACR_PASSWORD == ''
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag_sha }}

      - name: Build & Push image (registry configured)
        if: env.ACR_LOGIN_SERVER != '' && env.ACR_USERNAME != '' && env.ACR_PASSWORD != ''
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag_sha }}
            ${{ (steps.meta.outputs.tag_latest && format('{0}/{1}:latest', env.ACR_LOGIN_SERVER, env.IMAGE_NAME)) || '' }}
            ${{ steps.meta.outputs.tag_release && format('{0}/{1}:{2}', env.ACR_LOGIN_SERVER, env.IMAGE_NAME, steps.meta.outputs.tag_release) || '' }}