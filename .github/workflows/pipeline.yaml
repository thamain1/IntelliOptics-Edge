name: cicd
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    # This allows it to be triggered manually in the github console
    # You could put inputs here, but we don't need them.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  # This causes it to cancel previous in-progress actions in the same PR
  cancel-in-progress: true
env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "2.1.3"
  INTELLIOPTICS_API_TOKEN: ${{ secrets.INTELLIOPTICS_API_TOKEN }}

jobs:
  test-general-edge-endpoint:
    runs-on: ubuntu-22.04
    env:
      # This is the NGINX proxy endpoint
      INTELLIOPTICS_ENDPOINT: http://localhost:30101
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up python
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load Cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install edge-endpoint's python dependencies
        run: |
          poetry install --no-interaction --no-root

      - name: Run Unit Tests (that dont require docker)
        run: |
          # Point these tests to the cloud endpoint, because to test the edge-endpoint, they
          # dont actually issue requests. They interally setup a test client and server.
          # The cloud endpoint is needed so that the /me endpoint succeeds and we can actually
          # use the IO client.
          INTELLIOPTICS_ENDPOINT="intellioptics-api-37558.azurewebsites.net"
          source test/setup_plain_test_env.sh
          poetry run pytest -vs -k "not _live"

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get remove moby-runc
          sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install docker-ce

      - name: Build Docker Image
        run: docker build --tag intellioptics-edge .

      - name: Start Docker Container
        id: start_container
        run: |
          source test/setup_plain_test_env.sh
          echo "EDGE_CONFIG=$EDGE_CONFIG"
          container_id=$(docker run \
            -e LOG_LEVEL=DEBUG \
            -e EDGE_CONFIG \
            -d -p 30101:30101 \
            intellioptics-edge)
          echo "container_id=$container_id" >> $GITHUB_OUTPUT

      - name: Run Unit Tests (that do require docker)
        run: |
          INTELLIOPTICS_ENDPOINT=http://localhost:30101
          source test/setup_plain_test_env.sh
          poetry run pytest -k "_live"

      - name: Dump Logs from Docker Container
        if: always()
        run: docker logs ${{ steps.start_container.outputs.container_id }}

      - name: Stop Docker Container
        # This ensures that we always stop the container regardless of the outcomes of
        # the previous steps
        if: always()
        run: docker stop ${{ steps.start_container.outputs.container_id }}

  # Run IntelliOptics SDK tests against the edge proxy endpoint
  test-sdk:
    runs-on: ubuntu-22.04
    env:
      # This is the NGINX proxy endpoint
      INTELLIOPTICS_ENDPOINT: http://localhost:30101
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get remove moby-runc
          sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install docker-ce
      - name: Build Docker Image
        run: docker build --tag groundlight-edge .

      - name: Start Docker Container
        id: start_container
        run: |
          source test/setup_plain_test_env.sh
          echo "EDGE_CONFIG=$EDGE_CONFIG"
          container_id=$(docker run \
            -e LOG_LEVEL=DEBUG \
            -e EDGE_CONFIG \
            -d -p 30101:30101 \
            intellioptics-edge)
          echo "container_id=$container_id" >> $GITHUB_OUTPUT
      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load Cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      # Note that we're pulling the latest main from the SDK repo
      # This might be ahead of what's published to pypi, but it's useful to test things before they're released.
      - name: Checkout IntelliOptics SDK
        uses: actions/checkout@v4
        with:
          repository: intellioptics/python-sdk
          path: intellioptics-sdk

      - name: Install IntelliOptics SDK dependencies
        run: |
          cd intellioptics-sdk
          make install
      - name: Run IntelliOptics SDK tests against Prod API via Edge Proxy Endpoint
        run: |
          cd intellioptics-sdk
          make test-4edge
          cd ..
      - name: Dump Logs from Docker Container
        if: always()
        run: docker logs ${{ steps.start_container.outputs.container_id }}

      - name: Stop Docker Container
        # This ensures that we always stop the container regardless of the outcomes of
        # the previous steps
        if: always()
        run: docker stop ${{ steps.start_container.outputs.container_id }}

  main-tests-pass:
    runs-on: ubuntu-latest
    # This is a dummy step to avoid repeating the list of tests
    needs:
      - test-general-edge-endpoint
      - test-sdk
    steps:
      - name: declare success
        run: echo "Main suite of tests all pass."

  build-azure-image:
    name: Build edge image for Azure
    if: github.ref == 'refs/heads/main'
    needs:
      - main-tests-pass
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: intellioptics/edge-endpoint
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
    outputs:
      image-tag: ${{ steps.compute-tag.outputs.image_tag }}
      image-repository: ${{ steps.compute-tag.outputs.image_repository }}
      acr-name: ${{ steps.compute-tag.outputs.acr_name }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Compute image tag
        id: compute-tag
        run: |
          set -euo pipefail
          sha_tag="${GITHUB_SHA::7}"
          echo "image_tag=$sha_tag" >> "$GITHUB_OUTPUT"
          echo "image_repository=${ACR_LOGIN_SERVER}/${IMAGE_NAME}" >> "$GITHUB_OUTPUT"
          echo "acr_name=${ACR_LOGIN_SERVER%%.*}" >> "$GITHUB_OUTPUT"

      - name: Build and push image
        env:
          IMAGE_TAG: ${{ steps.compute-tag.outputs.image_tag }}
        run: |
          set -euo pipefail
          REG="$ACR_LOGIN_SERVER"
          IMG="$REG/${IMAGE_NAME}"
          docker build -t "$IMG:$IMAGE_TAG" -t "$IMG:latest" .
          docker push "$IMG:$IMAGE_TAG"
          docker push "$IMG:latest"

  deploy-azure-staging:
    name: Deploy edge endpoint to Azure staging
    if: github.ref == 'refs/heads/main'
    needs:
      - build-azure-image
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: intellioptics/edge-endpoint
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      AZ_RESOURCE_GROUP: ${{ secrets.AZ_RESOURCE_GROUP }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Select subscription (optional)
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          set -euo pipefail
          if [ -n "${AZURE_SUBSCRIPTION_ID}" ]; then
            az account set --subscription "${AZURE_SUBSCRIPTION_ID}"
          fi

      - name: Install template tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: Render staging container group manifest
        env:
          AZ_LOCATION: ${{ secrets.AZ_LOCATION }}
          ACI_NAME: ${{ secrets.AZURE_STAGING_CONTAINER_GROUP }}
          ACI_CONTAINER_NAME: edge-endpoint
          EDGE_IMAGE_TAG: ${{ needs.build-azure-image.outputs.image-tag }}
          ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
          INTELLIOPTICS_ENDPOINT: ${{ secrets.STAGING_INTELLIOPTICS_ENDPOINT }}
          INTELLIOPTICS_API_TOKEN: ${{ secrets.STAGING_INTELLIOPTICS_API_TOKEN }}
          FALLBACK_INTELLIOPTICS_API_TOKEN: ${{ secrets.INTELLIOPTICS_API_TOKEN }}
          SERVICE_BUS_CONN: ${{ secrets.STAGING_SERVICE_BUS_CONN }}
          FALLBACK_SERVICE_BUS_CONN: ${{ secrets.SERVICE_BUS_CONN }}
          SB_IMAGE_QUEUE: ${{ secrets.STAGING_SB_IMAGE_QUEUE }}
          SB_RESULTS_QUEUE: ${{ secrets.STAGING_SB_RESULTS_QUEUE }}
          SB_FEEDBACK_QUEUE: ${{ secrets.STAGING_SB_FEEDBACK_QUEUE }}
        run: |
          set -euo pipefail
          : "${ACI_NAME:?AZURE_STAGING_CONTAINER_GROUP secret is required}"
          : "${AZ_RESOURCE_GROUP:?AZ_RESOURCE_GROUP secret is required}"
          INTELLIOPTICS_API_TOKEN="${INTELLIOPTICS_API_TOKEN:-$FALLBACK_INTELLIOPTICS_API_TOKEN}"
          SERVICE_BUS_CONN="${SERVICE_BUS_CONN:-$FALLBACK_SERVICE_BUS_CONN}"
          export AZ_LOCATION ACI_NAME ACI_CONTAINER_NAME EDGE_IMAGE_TAG
          export ACR_LOGIN_SERVER ACR_USERNAME ACR_PASSWORD
          export INTELLIOPTICS_ENDPOINT INTELLIOPTICS_API_TOKEN SERVICE_BUS_CONN
          export SB_IMAGE_QUEUE SB_RESULTS_QUEUE SB_FEEDBACK_QUEUE
          envsubst < deploy/aci/edge-endpoint.yaml > edge-endpoint.staging.yaml

      - name: Deploy staging container group
        env:
          ACI_NAME: ${{ secrets.AZURE_STAGING_CONTAINER_GROUP }}
        run: |
          set -euo pipefail
          az container delete --resource-group "${AZ_RESOURCE_GROUP}" --name "${ACI_NAME}" --yes || true
          az container create --resource-group "${AZ_RESOURCE_GROUP}" --file edge-endpoint.staging.yaml

  release-azure:
    name: Promote Azure release
    if: github.ref == 'refs/heads/main'
    needs:
      - build-azure-image
      - deploy-azure-staging
    runs-on: ubuntu-latest
    environment: production
    env:
      IMAGE_NAME: intellioptics/edge-endpoint
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      AZ_RESOURCE_GROUP: ${{ secrets.AZ_RESOURCE_GROUP }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Select subscription (optional)
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          set -euo pipefail
          if [ -n "${AZURE_SUBSCRIPTION_ID}" ]; then
            az account set --subscription "${AZURE_SUBSCRIPTION_ID}"
          fi

      - name: Promote container image tags
        env:
          SOURCE_TAG: ${{ needs.build-azure-image.outputs.image-tag }}
        run: |
          set -euo pipefail
          : "${ACR_LOGIN_SERVER:?ACR_LOGIN_SERVER secret is required}"
          : "${SOURCE_TAG:?Missing image tag from build stage}"
          ACR_NAME="${ACR_LOGIN_SERVER%%.*}"
          SOURCE_IMAGE="${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${SOURCE_TAG}"
          az acr import --name "$ACR_NAME" --source "$SOURCE_IMAGE" --image "${IMAGE_NAME}:release" --force
          az acr import --name "$ACR_NAME" --source "$SOURCE_IMAGE" --image "${IMAGE_NAME}:production" --force

      - name: Install template tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: Render production container group manifest
        env:
          AZ_LOCATION: ${{ secrets.AZ_LOCATION }}
          ACI_NAME: ${{ secrets.AZURE_PROD_CONTAINER_GROUP }}
          ACI_CONTAINER_NAME: edge-endpoint
          EDGE_IMAGE_TAG: release
          ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
          INTELLIOPTICS_ENDPOINT: ${{ secrets.PROD_INTELLIOPTICS_ENDPOINT }}
          INTELLIOPTICS_API_TOKEN: ${{ secrets.PROD_INTELLIOPTICS_API_TOKEN }}
          FALLBACK_INTELLIOPTICS_API_TOKEN: ${{ secrets.INTELLIOPTICS_API_TOKEN }}
          SERVICE_BUS_CONN: ${{ secrets.PROD_SERVICE_BUS_CONN }}
          FALLBACK_SERVICE_BUS_CONN: ${{ secrets.SERVICE_BUS_CONN }}
          SB_IMAGE_QUEUE: ${{ secrets.PROD_SB_IMAGE_QUEUE }}
          SB_RESULTS_QUEUE: ${{ secrets.PROD_SB_RESULTS_QUEUE }}
          SB_FEEDBACK_QUEUE: ${{ secrets.PROD_SB_FEEDBACK_QUEUE }}
        run: |
          set -euo pipefail
          : "${ACI_NAME:?AZURE_PROD_CONTAINER_GROUP secret is required}"
          : "${AZ_RESOURCE_GROUP:?AZ_RESOURCE_GROUP secret is required}"
          INTELLIOPTICS_API_TOKEN="${INTELLIOPTICS_API_TOKEN:-$FALLBACK_INTELLIOPTICS_API_TOKEN}"
          SERVICE_BUS_CONN="${SERVICE_BUS_CONN:-$FALLBACK_SERVICE_BUS_CONN}"
          export AZ_LOCATION ACI_NAME ACI_CONTAINER_NAME EDGE_IMAGE_TAG
          export ACR_LOGIN_SERVER ACR_USERNAME ACR_PASSWORD
          export INTELLIOPTICS_ENDPOINT INTELLIOPTICS_API_TOKEN SERVICE_BUS_CONN
          export SB_IMAGE_QUEUE SB_RESULTS_QUEUE SB_FEEDBACK_QUEUE
          envsubst < deploy/aci/edge-endpoint.yaml > edge-endpoint.production.yaml

      - name: Deploy production container group
        env:
          ACI_NAME: ${{ secrets.AZURE_PROD_CONTAINER_GROUP }}
        run: |
          set -euo pipefail
          az container delete --resource-group "${AZ_RESOURCE_GROUP}" --name "${ACI_NAME}" --yes || true
          az container create --resource-group "${AZ_RESOURCE_GROUP}" --file edge-endpoint.production.yaml
