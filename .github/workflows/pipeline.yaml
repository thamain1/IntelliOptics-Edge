name: cicd
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    # This allows it to be triggered manually in the github console
    # You could put inputs here, but we don't need them.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  # This causes it to cancel previous in-progress actions in the same PR
  cancel-in-progress: true
env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "2.1.3"
  # This is the token associated with "prod-biggies" (with shared credentials on 1password)
  INTELLIOPTICS_API_TOKEN: ${{ secrets.INTELLIOPTICS_API_TOKEN }}

jobs:
  test-general-edge-endpoint:
    runs-on: ubuntu-22.04
    env:
      # This is the NGINX proxy endpoint
     INTELLIOPTICS_ENDPOINT: http://localhost:30101
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up python
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load Cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install edge-endpoint's python dependencies
        run: |
          poetry install --no-interaction --no-root

      - name: Run Unit Tests (that dont require docker)
        run: |
          # Point these tests to the cloud endpoint, because to test the edge-endpoint, they
          # dont actually issue requests. They interally setup a test client and server.
          # The cloud endpoint is needed so that the /me endpoint succeeds and we can actually
          # use the IO client.
          INTELLIOPTICS_ENDPOINT="intellioptics-api-37558.azurewebsites.net"
          source test/setup_plain_test_env.sh
          poetry run pytest -vs -k "not _live"

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get remove moby-runc
          sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install docker-ce

      - name: Build Docker Image
        run: docker build --tag intellioptics-edge .

      - name: Start Docker Container
        id: start_container
        run: |
          source test/setup_plain_test_env.sh
          echo "EDGE_CONFIG=$EDGE_CONFIG"
          container_id=$(docker run \
            -e LOG_LEVEL=DEBUG \
            -e EDGE_CONFIG \
            -d -p 30101:30101 \
            intellioptics-edge)
          echo "container_id=$container_id" >> $GITHUB_OUTPUT

      - name: Run Unit Tests (that do require docker)
        run: |
          INTELLIOPTICS_ENDPOINT=http://localhost:30101
          source test/setup_plain_test_env.sh
          poetry run pytest -k "_live"

      - name: Dump Logs from Docker Container
        if: always()
        run: docker logs ${{ steps.start_container.outputs.container_id }}

      - name: Stop Docker Container
        # This ensures that we always stop the container regardless of the outcomes of
        # the previous steps
        if: always()
        run: docker stop ${{ steps.start_container.outputs.container_id }}

  # Run IntelliOptics SDK tests against the edge proxy endpoint
  test-sdk:
    runs-on: ubuntu-22.04
    env:
      # This is the NGINX proxy endpoint
      INTELLIOPTICS_ENDPOINT: http://localhost:30101
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get remove moby-runc
          sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install docker-ce

      - name: Build Docker Image
        run: docker build --tag groundlight-edge .

      - name: Start Docker Container
        id: start_container
        run: |
          source test/setup_plain_test_env.sh
          echo "EDGE_CONFIG=$EDGE_CONFIG"
          container_id=$(docker run \
            -e LOG_LEVEL=DEBUG \
            -e EDGE_CONFIG \
            -d -p 30101:30101 \
            intellioptics-edge)
          echo "container_id=$container_id" >> $GITHUB_OUTPUT

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load Cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      # Note that we're pulling the latest main from the SDK repo
      # This might be ahead of what's published to pypi, but it's useful to test things before they're released.
      - name: Checkout IntelliOptics SDK
        uses: actions/checkout@v4
        with:
          repository: intellioptics/python-sdk
          path: intellioptics-sdk

      - name: Install IntelliOptics SDK dependencies
        run: |
          cd intellioptics-sdk
          make install

      - name: Run IntelliOptics SDK tests against Prod API via Edge Proxy Endpoint
        run: |
          cd intellioptics-sdk
          make test-4edge
          cd ..

      - name: Dump Logs from Docker Container
        if: always()
        run: docker logs ${{ steps.start_container.outputs.container_id }}

      - name: Stop Docker Container
        # This ensures that we always stop the container regardless of the outcomes of
        # the previous steps
        if: always()
        run: docker stop ${{ steps.start_container.outputs.container_id }}

  call-build-push-ee-image:
    # We run this at the beginning of every PR so that the various full k3s tests
    # can use this image
    uses: ./.github/workflows/build-push-ee-image.yaml
    with:
      repo: ${{ github.repository }}
      ref: ${{ github.ref }}
    secrets:
      REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
      REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

  validate-setup-ee:
    runs-on: ubuntu-latest-4-cores
    # We need more disk space than the default (2 core) runners have.
    # They have 73GB total, 21GB available.  4-cores has 145GB raw, 93 GB available.
    needs:
      - call-build-push-ee-image
    env:
      REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
      REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      ARTIFACT_STORAGE_ACCESS_KEY: ${{ secrets.ARTIFACT_STORAGE_ACCESS_KEY }}
      ARTIFACT_STORAGE_SECRET_KEY: ${{ secrets.ARTIFACT_STORAGE_SECRET_KEY }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install k3s
        run: |
          ./deploy/bin/install-k3s.sh cpu

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install edge-endpoint's python dependencies
        run: |
          poetry install --no-interaction --no-root

      - name: Validate setup edge endpoint
        run: |
          export IMAGE_TAG=$(./deploy/bin/git-tag-name.sh)
          make validate-setup-ee

      - name: Diagnose failure
        if: failure()
        run: |
          NAMESPACE=validate-setup-ee ./deploy/bin/diagnose-k8-failure.sh

  validate-setup-helm:
    runs-on: ubuntu-latest-4-cores
    needs:
      - call-build-push-ee-image
    env:
      # associated with roxanne+test_edge account since for some reason it was failing with
      # prod biggies
      INTELLIOPTICS_API_TOKEN: ${{ secrets.K3S_TEST_ INTELLIOPTICS_API_TOKEN }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install k3s
        run: |
          ./deploy/bin/install-k3s.sh cpu

      - name: Validate setup edge endpoint
        run: |
          make validate-setup-helm

      - name: Diagnose failure
        if: failure()
        run: |
          NAMESPACE=validate-setup-helm ./deploy/bin/diagnose-k8-failure.sh

  # we run this separately from validate-setup-ee since we run out of disk space doing
  # both of them on the same runner and they can be slow so its best to do them in parallel
  test-with-k3s-setup-ee:
    runs-on: ubuntu-latest-4-cores
    needs:
      - call-build-push-ee-image
    env:
      # associated with roxanne+test_edge account since for some reason it was failing with
      # prod biggies
      INTELLIOPTICS_API_TOKEN: ${{ secrets.K3S_TEST_INTELLIOPTICS_API_TOKEN }}
      REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
      REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      ARTIFACT_STORAGE_ACCESS_KEY: ${{ secrets.ARTIFACT_STORAGE_ACCESS_KEY }}
      ARTIFACT_STORAGE_SECRET_KEY: ${{ secrets.ARTIFACT_STORAGE_SECRET_KEY }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install k3s
        run: |
          ./deploy/bin/install-k3s.sh cpu

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install edge-endpoint's python dependencies
        run: |
          poetry install --no-interaction --no-root

      - name: Clear Poetry cache
        run: |
          poetry cache clear pypi --all
          poetry cache clear virtualenvs --all

      - name: Run tests with k3s
        run: |
          make test-with-k3s-setup-ee

      - name: Diagnose failure
        if: failure()
        run: |
          NAMESPACE=test-with-k3s ./deploy/bin/diagnose-k8-failure.sh

  call-test-with-k3s-helm:
    needs:
      - call-build-push-ee-image
    uses: ./.github/workflows/test-k3s-helm.yaml
    with:
      repo: ${{ github.repository }}
      ref: ${{ github.ref }}
    secrets:
      K3S_TEST_INTELLIOPTICS_API_TOKEN: ${{ secrets.K3S_TEST_INTELLIOPTICS_API_TOKEN }}

  main-tests-pass:
    runs-on: ubuntu-latest
    # This is a dummy step to avoid repeating the list of tests
    needs:
      - test-general-edge-endpoint
      - test-sdk
      - test-with-k3s-setup-ee
      - call-test-with-k3s-helm
      - validate-setup-ee
      - validate-setup-helm
    steps:
      - name: declare success
        run: echo "Main suite of tests all pass."
  
  update-glhub:
    if: github.ref == 'refs/heads/main'
    needs:
      - main-tests-pass
    runs-on: ubuntu-latest
    environment: live

    steps:
      - name: Checkout glhub
        uses: actions/checkout@v4
        with:
          repository: groundlight/glhub
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
          path: glhub

      - name: Update GLHub
        run: |
          cd glhub
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git submodule update --init --recursive
          git submodule update --remote edge-endpoint
          git add .
          git commit -m "Update edge endpoint submodule"
          git push https://edge-glhub-bot:${{ secrets.BOT_GITHUB_TOKEN }}@github.com/groundlight/glhub.git main
        env:
          GIT_AUTHOR_NAME: "github-actions[bot]"
          GIT_AUTHOR_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"

  tag-pre-release:
    if: github.ref == 'refs/heads/main'
    needs:
      - main-tests-pass
    runs-on: ubuntu-latest
    env:
      REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
      REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
    steps:
      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Check out code
        uses: actions/checkout@v4

      - name: Tag main images with the "pre-release" tag after all the tests pass
        run: REGISTRY_URL=${{ secrets.REGISTRY_URL }} REGISTRY_USERNAME=${{ secrets.REGISTRY_USERNAME }} REGISTRY_PASSWORD=${{ secrets.REGISTRY_PASSWORD }} ./deploy/bin/tag-edge-endpoint-image.sh pre-release

  tag-release:
    # The environment rules are not defined in code -- instead, they are defined in the Github UI:
    #   https://github.com/groundlight/edge-endpoint/settings/environments/5838966020/edit
    # As of this time of writing, the environment rules require manual approval for tagging a release.
    environment: live
    # This will run (after manual approval) if a commit is pushed to the `main` branch
    if: github.ref == 'refs/heads/main'
    needs:
      - main-tests-pass
      - tag-pre-release
    runs-on: ubuntu-22.04
    env:
      REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
      REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
    steps:
      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Check out code
        uses: actions/checkout@v4
      - name: Tag main images with the "latest" and "release" tags
        run: |-
          REGISTRY_URL=${{ secrets.REGISTRY_URL }} REGISTRY_USERNAME=${{ secrets.REGISTRY_USERNAME }} REGISTRY_PASSWORD=${{ secrets.REGISTRY_PASSWORD }} ./deploy/bin/tag-edge-endpoint-image.sh latest
          REGISTRY_URL=${{ secrets.REGISTRY_URL }} REGISTRY_USERNAME=${{ secrets.REGISTRY_USERNAME }} REGISTRY_PASSWORD=${{ secrets.REGISTRY_PASSWORD }} ./deploy/bin/tag-edge-endpoint-image.sh release

  publish-chart:
    if: github.ref == 'refs/heads/main'
    needs:
      - tag-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create deploy worktree
        run: |
          git fetch origin gh-pages
          git worktree add .deploy gh-pages

      - name: Package chart into .deploy
        run: |
          helm package ./deploy/helm/groundlight-edge-endpoint --destination .deploy

      - name: Update Helm index.yaml
        run: |
          helm repo index .deploy \
            --url https://code.groundlight.ai/edge-endpoint/ \
            --merge .deploy/index.yaml

      - name: Commit and push to gh-pages
        run: |
          cd .deploy
          git add .
          git commit -m "Publish Helm chart $(date -u +'%Y-%m-%d %H:%M:%S UTC')" || echo "Nothing to commit"
          git push origin gh-pages
