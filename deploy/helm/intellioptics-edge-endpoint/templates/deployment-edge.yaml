{{- if and (eq .Values.inferenceFlavor "gpu") (not (lookup "node.k8s.io/v1" "RuntimeClass" "" "nvidia")) }}
# Required runtime class for GPU use in k3s
# Pods must have `runtimeClassName: nvidia` set to access GPU
apiVersion: node.k8s.io/v1
kind: RuntimeClass
metadata:
  name: nvidia
  annotations:
    "helm.sh/resource-policy": keep
handler: nvidia
---
{{- end }}
apiVersion: v1
kind: Service
metadata:
  name: edge-endpoint-service
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "IntelliOptics-edge-endpoint.labels" . | nindent 4 }}
spec:
  selector:
    app: edge-logic-server
  ports:
    - name: http
      protocol: TCP
      port: 30101
      targetPort: 30101
      nodePort: {{ .Values.edgeEndpointPort }}
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: edge-endpoint
  namespace: {{ .Values.namespace }}
  labels:
    app: edge-endpoint
    {{- include "IntelliOptics-edge-endpoint.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: edge-logic-server
  template:
    metadata:
      labels:
        app: edge-logic-server
      annotations:
        checksum/config: {{ include "IntelliOptics-edge-endpoint.edgeConfig" . | sha256sum }}
    spec:
      serviceAccountName: edge-endpoint-service-account
      initContainers:
        - name: database-prep
          image: {{ .Values.image.edgeEndpoint | quote }}
          imagePullPolicy: {{ .Values.imagePullPolicy | default "IfNotPresent" | quote }}
          volumeMounts:
            - name: edge-endpoint-persistent-volume
              mountPath: /opt/intellioptics/edge/sqlite
          command: ["/bin/bash", "/intellioptics-edge/deploy/bin/setup_db.sh"]
      containers:
        - name: nginx
          image: {{ .Values.image.nginx | quote }}
          imagePullPolicy: {{ .Values.imagePullPolicy | default "IfNotPresent" | quote }}
          resources:
            requests:
              memory: "50Mi"
          command: ["/bin/bash", "-c", "./app/bin/launch-nginx.sh"]
          ports:
            - containerPort: 30101
          volumeMounts:
            - name: nginx-config-volume
              mountPath: /opt/nginx/nginx.conf
              subPath: nginx.conf
          startupProbe:
            httpGet:
              path: /health/live
              port: 30101
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 30101
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 2
          livenessProbe:
            httpGet:
              path: /health/ready
              port: 30101
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 4
        - name: edge-endpoint
          image: {{ .Values.image.edgeEndpoint | quote }}
          imagePullPolicy: {{ .Values.imagePullPolicy | default "IfNotPresent" | quote }}
          resources:
            requests:
              memory: "700Mi"
          env:
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | quote }}
            - name: DEPLOY_DETECTOR_LEVEL_INFERENCE
              value: "1"
            - name: INTELLIOPTICS_ENDPOINT
              value: {{ .Values.upstreamEndpoint | quote }}
          volumeMounts:
            - name: edge-config-volume
              mountPath: /etc/intellioptics/edge-config
            - name: nginx-config-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: dummy-nginx.conf
            - name: edge-endpoint-persistent-volume
              mountPath: /opt/intellioptics/edge/sqlite
            - name: device-info-volume
              mountPath: /opt/intellioptics/device
        - name: status-monitor
          image: {{ .Values.image.stat | quote }}
          imagePullPolicy: {{ .Values.imagePullPolicy | default "IfNotPresent" | quote }}
          resources:
            requests:
              memory: "150Mi"
          ports:
            - containerPort: 8123
          command: ["./app/bin/launch-status-monitor.sh"]
          env:
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | quote }}
            - name: INTELLIOPTICS_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: IntelliOptics-api-token
                  key: INTELLIOPTICS_API_TOKEN
                  optional: true
            - name: INFERENCE_FLAVOR
              value: {{ .Values.inferenceFlavor | quote }}
          volumeMounts:
            - name: edge-config-volume
              mountPath: /etc/intellioptics/edge-config
            - name: device-info-volume
              mountPath: /opt/intellioptics/device
        - name: inference-model-updater
          image: {{ .Values.image.upd | quote }}
          imagePullPolicy: {{ .Values.imagePullPolicy | default "IfNotPresent" | quote }}
          resources:
            requests:
              memory: "200Mi"
          command: ["/bin/bash", "-c"]
          args: ["poetry run python -m app.model_updater.update_models"]
          env:
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | quote }}
            - name: DEPLOY_DETECTOR_LEVEL_INFERENCE
              value: "1"
            - name: INTELLIOPTICS_ENDPOINT
              value: {{ .Values.upstreamEndpoint | quote }}
            - name: INTELLIOPTICS_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: IntelliOptics-api-token
                  key: INTELLIOPTICS_API_TOKEN
                  optional: true
          volumeMounts:
            - name: edge-config-volume
              mountPath: /etc/intellioptics/edge-config
            - name: nginx-config-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: kubernetes-namespace
              mountPath: /etc/intellioptics/kubernetes-namespace
            - name: inference-deployment-template-volume
              mountPath: /etc/intellioptics/inference-deployment
            - name: edge-endpoint-persistent-volume
              mountPath: /opt/intellioptics/edge/sqlite
            - name: edge-endpoint-persistent-volume
              mountPath: /opt/intellioptics/edge/serving/model-repo
            - name: device-info-volume
              mountPath: /opt/intellioptics/device
      imagePullSecrets:
        - name: registry-credentials
      volumes:
        - name: edge-config-volume
          configMap:
            name: edge-config
        - name: nginx-config-volume
          configMap:
            name: nginx-config
        - name: kubernetes-namespace
          configMap:
            name: kubernetes-namespace
        - name: inference-deployment-template-volume
          configMap:
            name: inference-deployment-template
        - name: edge-endpoint-persistent-volume
          persistentVolumeClaim:
            claimName: edge-endpoint-pvc
        - name: device-info-volume
          hostPath:
            path: /opt/intellioptics/device
            type: DirectoryOrCreate
