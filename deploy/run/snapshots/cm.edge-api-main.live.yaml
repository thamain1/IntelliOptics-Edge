apiVersion: v1
data:
  main.py: "# IntelliOptics API main (clean via ConfigMap)\nfrom typing import Dict\nfrom
    fastapi import FastAPI, APIRouter, Body\nfrom fastapi.middleware.cors import CORSMiddleware\n\ntry:\n
    \   from .config import settings  # type: ignore\nexcept Exception:\n    class
    _S: allowed_origins = \"*\"\n    settings = _S()  # type: ignore\n\ntry:\n    from
    .db import Base, engine  # type: ignore\n    Base.metadata.create_all(bind=engine)
    \ # type: ignore\nexcept Exception:\n    pass\n\nrouter = APIRouter()\n\n@router.get(\"/v1/status\")\nasync
    def v1_status():\n    return {\"ok\": True, \"status\": \"ready\"}\n\n@router.post(\"/v1/image-queries/{image_query_id}/human-label\")\nasync
    def human_label(image_query_id: str, body: Dict = Body(...)):\n    label  = (body
    or {}).get(\"label\")\n    reason = (body or {}).get(\"reason\")\n    return {\"ok\":
    True, \"image_query_id\": image_query_id, \"label\": label, \"reason\": reason}\n\ndef
    create_app() -> FastAPI:\n    app = FastAPI(title=\"IntelliOptics Backend\", version=\"0.2.0\")\n
    \   allowed = getattr(settings, \"allowed_origins\", \"*\")\n    origins = [\"*\"]
    if allowed == \"*\" else [o.strip() for o in str(allowed).split(\",\") if o.strip()]\n
    \   app.add_middleware(CORSMiddleware, allow_origins=origins, allow_methods=[\"*\"],
    allow_headers=[\"*\"])\n    @app.get(\"/healthz\")\n    async def healthz():\n
    \       return {\"ok\": True}\n    app.include_router(router)\n    return app\n\napp
    = create_app()\r\n"
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"main.py":"# IntelliOptics API main (clean via ConfigMap)\nfrom typing import Dict\nfrom fastapi import FastAPI, APIRouter, Body\nfrom fastapi.middleware.cors import CORSMiddleware\n\ntry:\n    from .config import settings  # type: ignore\nexcept Exception:\n    class _S: allowed_origins = \"*\"\n    settings = _S()  # type: ignore\n\ntry:\n    from .db import Base, engine  # type: ignore\n    Base.metadata.create_all(bind=engine)  # type: ignore\nexcept Exception:\n    pass\n\nrouter = APIRouter()\n\n@router.get(\"/v1/status\")\nasync def v1_status():\n    return {\"ok\": True, \"status\": \"ready\"}\n\n@router.post(\"/v1/image-queries/{image_query_id}/human-label\")\nasync def human_label(image_query_id: str, body: Dict = Body(...)):\n    label  = (body or {}).get(\"label\")\n    reason = (body or {}).get(\"reason\")\n    return {\"ok\": True, \"image_query_id\": image_query_id, \"label\": label, \"reason\": reason}\n\ndef create_app() -\u003e FastAPI:\n    app = FastAPI(title=\"IntelliOptics Backend\", version=\"0.2.0\")\n    allowed = getattr(settings, \"allowed_origins\", \"*\")\n    origins = [\"*\"] if allowed == \"*\" else [o.strip() for o in str(allowed).split(\",\") if o.strip()]\n    app.add_middleware(CORSMiddleware, allow_origins=origins, allow_methods=[\"*\"], allow_headers=[\"*\"])\n    @app.get(\"/healthz\")\n    async def healthz():\n        return {\"ok\": True}\n    app.include_router(router)\n    return app\n\napp = create_app()\r\n"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"edge-api-main","namespace":"intellioptics-edge"}}
  creationTimestamp: "2025-10-17T00:15:16Z"
  name: edge-api-main
  namespace: intellioptics-edge
  resourceVersion: "8900363"
  uid: afed1470-de61-4612-a6a5-b9918afe5993
